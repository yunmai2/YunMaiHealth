/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateYuyuArgs } from "./CreateYuyuArgs";
import { UpdateYuyuArgs } from "./UpdateYuyuArgs";
import { DeleteYuyuArgs } from "./DeleteYuyuArgs";
import { YuyuFindManyArgs } from "./YuyuFindManyArgs";
import { YuyuFindUniqueArgs } from "./YuyuFindUniqueArgs";
import { Yuyu } from "./Yuyu";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { YuyuService } from "../yuyu.service";
@graphql.Resolver(() => Yuyu)
export class YuyuResolverBase {
  constructor(protected readonly service: YuyuService) {}

  async _yuyusMeta(
    @graphql.Args() args: YuyuFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Yuyu])
  async yuyus(@graphql.Args() args: YuyuFindManyArgs): Promise<Yuyu[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Yuyu, { nullable: true })
  async yuyu(@graphql.Args() args: YuyuFindUniqueArgs): Promise<Yuyu | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Yuyu)
  async createYuyu(@graphql.Args() args: CreateYuyuArgs): Promise<Yuyu> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Yuyu)
  async updateYuyu(@graphql.Args() args: UpdateYuyuArgs): Promise<Yuyu | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Yuyu)
  async deleteYuyu(@graphql.Args() args: DeleteYuyuArgs): Promise<Yuyu | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [User])
  async users(
    @graphql.Parent() parent: Yuyu,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
