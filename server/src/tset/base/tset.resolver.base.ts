/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTsetArgs } from "./CreateTsetArgs";
import { UpdateTsetArgs } from "./UpdateTsetArgs";
import { DeleteTsetArgs } from "./DeleteTsetArgs";
import { TsetFindManyArgs } from "./TsetFindManyArgs";
import { TsetFindUniqueArgs } from "./TsetFindUniqueArgs";
import { Tset } from "./Tset";
import { User } from "../../user/base/User";
import { TsetService } from "../tset.service";

@graphql.Resolver(() => Tset)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TsetResolverBase {
  constructor(
    protected readonly service: TsetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tset",
    action: "read",
    possession: "any",
  })
  async _tsetsMeta(
    @graphql.Args() args: TsetFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tset])
  @nestAccessControl.UseRoles({
    resource: "Tset",
    action: "read",
    possession: "any",
  })
  async tsets(@graphql.Args() args: TsetFindManyArgs): Promise<Tset[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tset, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tset",
    action: "read",
    possession: "own",
  })
  async tset(@graphql.Args() args: TsetFindUniqueArgs): Promise<Tset | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tset)
  @nestAccessControl.UseRoles({
    resource: "Tset",
    action: "create",
    possession: "any",
  })
  async createTset(@graphql.Args() args: CreateTsetArgs): Promise<Tset> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        test: args.data.test
          ? {
              connect: args.data.test,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tset)
  @nestAccessControl.UseRoles({
    resource: "Tset",
    action: "update",
    possession: "any",
  })
  async updateTset(@graphql.Args() args: UpdateTsetArgs): Promise<Tset | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          test: args.data.test
            ? {
                connect: args.data.test,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tset)
  @nestAccessControl.UseRoles({
    resource: "Tset",
    action: "delete",
    possession: "any",
  })
  async deleteTset(@graphql.Args() args: DeleteTsetArgs): Promise<Tset | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async test(@graphql.Parent() parent: Tset): Promise<User | null> {
    const result = await this.service.getTest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
