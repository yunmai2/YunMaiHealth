/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTaskUserArgs } from "./CreateTaskUserArgs";
import { UpdateTaskUserArgs } from "./UpdateTaskUserArgs";
import { DeleteTaskUserArgs } from "./DeleteTaskUserArgs";
import { TaskUserFindManyArgs } from "./TaskUserFindManyArgs";
import { TaskUserFindUniqueArgs } from "./TaskUserFindUniqueArgs";
import { TaskUser } from "./TaskUser";
import { User } from "../../user/base/User";
import { TaskUserService } from "../taskUser.service";
@graphql.Resolver(() => TaskUser)
export class TaskUserResolverBase {
  constructor(protected readonly service: TaskUserService) {}

  async _taskUsersMeta(
    @graphql.Args() args: TaskUserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [TaskUser])
  async taskUsers(
    @graphql.Args() args: TaskUserFindManyArgs
  ): Promise<TaskUser[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => TaskUser, { nullable: true })
  async taskUser(
    @graphql.Args() args: TaskUserFindUniqueArgs
  ): Promise<TaskUser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskUser)
  async createTaskUser(
    @graphql.Args() args: CreateTaskUserArgs
  ): Promise<TaskUser> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        test: args.data.test
          ? {
              connect: args.data.test,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TaskUser)
  async updateTaskUser(
    @graphql.Args() args: UpdateTaskUserArgs
  ): Promise<TaskUser | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          test: args.data.test
            ? {
                connect: args.data.test,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskUser)
  async deleteTaskUser(
    @graphql.Args() args: DeleteTaskUserArgs
  ): Promise<TaskUser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, { nullable: true })
  async test(@graphql.Parent() parent: TaskUser): Promise<User | null> {
    const result = await this.service.getTest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
